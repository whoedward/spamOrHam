Asunto: Lab 5
De: Michael Wang <michaelwang2016@u.northwestern.edu>
Fecha: 6/11/2013 12:44 PM
Para: ethanrobison2016@u.northwestern.edu

Ethan,

Can you skim over the lab and check to make sure I didn't make any dumb mistakes? Once you're done, you can send it to the TA. Also, please check over my logic to the question about the buildings and natural frequencies in Part 3. I am unsure.

From,
Michael Wang

buildings.m

%BUILDINGS is a script that solves the natupper-rightal frequency and eigenvectors
%for simplified models of buildings for Part 3 of the lab.
%Ethan Robison and Michael Wang
%EA4 Lab #5
%Due 6/11/13
%%
clear
clc

%remove the comments to activate a scenario:
%{
%**Solution for a one-story building**

clear
clc

%C is the incidence matrix - each row represents an edge, and a 1 denotes
%the node that edge is connected to (0 denotes an absence of such). For a
%list of nodes and their coordinates, see matrix X, below.
C = [1 1 0 0;   %edge 1 - bottom edge
     0 1 1 0;   %edge 2 - upper-left to bottom-right diagonal edge
     1 0 0 1;   %edge 3 - upper-right to bottom-left diagonal edge
     1 0 1 0;   %edge 4 - left edge
     0 1 0 1;   %edge 5 - right edge
     0 0 1 1];  %edge 6 - top edge
 
%A is the adjacency matrix - diagonals denote how many edges come out of
%each node, and 0s and 1s denote the connections (or lack thereof).
A = C'*C;
 
%X is the coordinates of each node
X = [0 0;       %node 1 - bottom-left node
     1 0;       %node 2 - bottom-right node
     0 1;       %node 3 - upper-left node
     1 1];      %node 4 - upper-right node
  
%This plots the system and pauses the function so the user can verify it.
gplot(A,X,'-o'),title('One-Story Building'),xlabel('x'),ylabel('y');
axis square;
axis([-0.5 1.5 -0.5 X(end,2)+0.5]); %auto-fit axis
figure(1)
pause           %for inspection

%N is a matrix that relates the change in position of each node to a change
%in length of an edge, and N' does the opposite. Edge 1 is omitted, as it
%does not move.
%columns 1 and 2 represent the x and y of node 3
%columns 3 and 4 represent the x and y of node 4
N = [-1/sqrt(2) 1/sqrt(2) 0 0;  %edge 2 - upper-left to bottom-right diagonal edge
      0 0 1/sqrt(2) 1/sqrt(2);  %edge 3 - upper-right to bottom-left diagonal edge
      0 1 0 0;                  %edge 4 - left edge
      0 0 0 1;                  %edge 5 - right edge
     -1 0 1 0];                 %edge 6 - top edge
     
%K is the stiffness matrix
K = N'*N;

%We find the eigenmodes and their associated oscillations through MATLAB.
[V,D] = eigs(-K);               %V = eigenvectors, D = eigenvalues
omega = sqrt(-D);               %omega = oscillation frequencies
V = 0.1*V;                      %makes the eigenmodes more manageable

%The next series of codes provides the means for animates the structure.            
for i = 1:size(omega);          %cycle through frequencies
    for t = 0:.05:(2*pi)/omega(i,i)     %animation runs for one period
        oscillator = sin(omega(i,i)*t); %sine looks better than cosine, no physical
                                        %meaning to my choice of trig function
        coordinates = [0 0;             %this plots the nodes over time
                       1 0;
                       V(1,i)*oscillator 1+(V(2,i)*oscillator);
                       1+(V(3,i)*oscillator) 1+(V(4,i)*oscillator)];
        figure(1)
        gplot(A,coordinates,'-o'),title(sprintf('One-Story Building \n w = %4.3f, Eigenmode = [%4.3f %4.3f %4.3f %4.3f]',omega(i,i),V(1,i),V(2,i),V(3,i),V(4,i)));...
            xlabel('x'),ylabel('y');
        axis square
        axis([-0.5 1.5 -0.5 X(end,2)+0.5])
        axis manual
    end
    pause
end
%}

%**Solution for a two-story building**
%{
clear
clc

%C is the incidence matrix - each row represents an edge, and a 1 denotes
%the node that edge is connected to (0 denotes an absence of such). For a
%list of nodes and their coordinates, see matrix X, below.
C = [1 1 0 0 0 0;   %edge 1 - bottom edge
     0 1 1 0 0 0;   %edge 2 - upper-left to bottom-right diagonal edge, floor 1
     1 0 0 1 0 0;   %edge 3 - upper-right to bottom-left diagonal edge, floor 1
     1 0 1 0 0 0;   %edge 4 - left edge, floor 1
     0 1 0 1 0 0;   %edge 5 - right edge, floor 1
     0 0 1 1 0 0;   %edge 6 - middle edge
     0 0 0 1 1 0;   %edge 7 - upper-left to bottom-right diagonal edge, floor 2
     0 0 1 0 0 1;   %edge 8 - upper-right to bottom-left diagonal edge, floor 2
     0 0 1 0 1 0;   %edge 9 - left edge, floor 2
     0 0 0 1 0 1;   %edge 10 - right edge, floor 2
     0 0 0 0 1 1];  %edge 11 - top edge

%A is the adjacency matrix - diagonals denote how many edges come out of
%each node, and 0s and 1s denote the connections (or lack thereof).
A = C'*C;

%X is the coordinates of each node
X = [0 0;           %node 1 - bottom-left node
     1 0;           %node 2 - bottom-right node
     0 1;           %node 3 - middle-left node
     1 1;           %node 4 - middle-right node
     0 2;           %node 5 - upper-left node
     1 2];          %node 6 - upper-right node

%This plots the system and pauses the function so the user can verify it.
gplot(A,X,'-o'),title('Two-Story Building'),xlabel('x'),ylabel('y');
axis square
axis([-0.5 1.5 -0.5 X(end,2)+0.5]); %auto-fits the axes to the figure
figure(1)
pause               %for inspection

%N is a matrix that relates the change in position of each node to a change
%in length of an edge, and N' does the opposite.
%columns 1,2 represent the x and y of node 3
%columns 3,4 represent the x and y of node 4, etc.
N = [-1/sqrt(2) 1/sqrt(2) 0 0 0 0 0 0;  %edge 2 - upper-left to bottom-right diagonal edge, floor 1
      0 0 1/sqrt(2) 1/sqrt(2) 0 0 0 0;  %edge 3 - upper-right to bottom-left diagonal edge, floor 1
      0 1 0 0 0 0 0 0;                  %edge 4 - left edge, floor 1
      0 0 0 1 0 0 0 0;                  %edge 5 - right edge, floor 1
     -1 0 1 0 0 0 0 0;                  %edge 6 - middle edge
      0 0 1/sqrt(2) -1/sqrt(2) -1/sqrt(2) 1/sqrt(2) 0 0;
                                        %edge 7 - upper-left to bottom-right diagonal edge, floor 2
     -1/sqrt(2) -1/sqrt(2) 0 0 0 0 1/sqrt(2) 1/sqrt(2);
                                        %edge 8 - upper-right to bottom-left diagonal edge, floor 2
      0 -1 0 0 0 1 0 0;                 %edge 9 - left edge, floor 2
      0 0 0 -1 0 0 0 1;                 %edge 10 - right edge, floor 2
      0 0 0 0 -1 0 0 1];                %edge 11 - top edge
  
%K is the stiffness matrix
K = N'*N;

%We find the eigenmodes and their associated oscillations through MATLAB.
[V,D] = eigs(-K);               %V = eigenvectors, D = eigenvalues
omega = sqrt(-D);               %omega = oscillation frequencies
V = 0.1*V;                      %makes the eigenmodes manageable
  
%The next series of codes provides the means for animating the structure.            

for i = 1:size(omega);
    for t = 0:.05:(2*pi)/omega(i,i)     %runs for one period
        oscillator = sin(omega(i,i)*t); %sine looks better than cosine, no physical
                                        %meaning to my choice of trig function
        coordinates = [0 0;             %this plots the nodes over time
                       1 0;
                       V(1,i)*oscillator 1+(V(2,i)*oscillator);
                       1+(V(3,i)*oscillator) 1+(V(4,i)*oscillator)
                       V(5,i)*oscillator 2+(V(6,i)*oscillator);
                       1+(V(7,i)*oscillator) 2+(V(8,i)*oscillator)];
        figure(1)
        gplot(A,coordinates,'-o'),title(sprintf('Two-Story Building \n w = %4.3f, Eigenmode = [%4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f]',omega(i,i),V(1,i),V(2,i),V(3,i),V(4,i),V(5,i),V(6,i),V(7,i),V(8,i)));...
            xlabel('x'),ylabel('y');
        axis square
        axis([-0.5 1.5 -0.5 X(end,2)+0.5])
        axis manual
    end
    pause
end
%}

%**Solution for a three-story building**
%{
clear
clc

%C is the incidence matrix - each row represents an edge, and a 1 denotes
%the node that edge is connected to (0 denotes an absence of such). For a
%list of nodes and their coordinates, see matrix X, below.
C = [1 1 0 0 0 0 0 0;   %edge 1 - bottom edge
     0 1 1 0 0 0 0 0;   %edge 2 - upper-left to bottom-right diagonal edge, floor 1
     1 0 0 1 0 0 0 0;   %edge 3 - upper-right to bottom-left diagonal edge, floor 1
     1 0 1 0 0 0 0 0;   %edge 4 - left edge, floor 1
     0 1 0 1 0 0 0 0;   %edge 5 - right edge, floor 1
     0 0 1 1 0 0 0 0;   %edge 6 - bottom middle edge
     0 0 0 1 1 0 0 0;   %edge 7 - upper-left to bottom-right diagonal edge, floor 2
     0 0 1 0 0 1 0 0;   %edge 8 - upper-right to bottom-left diagonal edge, floor 2
     0 0 1 0 1 0 0 0;   %edge 9 - left edge, floor 2
     0 0 0 1 0 1 0 0;   %edge 10 - right edge, floor 2
     0 0 0 0 1 1 0 0;   %edge 11 - top middle edge
     0 0 0 0 0 1 1 0;   %edge 12 - upper-left to bottom-right diagonal edge, floor 3
     0 0 0 0 1 0 0 1;   %edge 13 - upper-right to bottom-left diagonal edge, floor 3
     0 0 0 0 1 0 1 0;   %edge 14 - left edge, floor 3
     0 0 0 0 0 1 0 1;   %edge 15 - right edge, floor 3
     0 0 0 0 0 0 1 1];  %edge 16 - top edge

%A is the adjacency matrix - diagonals denote how many edges come out of
%each node, and 0s and 1s denote the connections (or lack thereof).
A = C'*C;

%X is the coordinates of each node (indicate the meanings of the
%abbottom-rightevaitions)***
X = [0 0;           %node 1 - bottom-left node
     1 0;           %node 2 - bottom-right node
     0 1;           %node 3 - bottom middle left node
     1 1;           %node 4 - bottom middle right node
     0 2;           %node 5 - upper middle left node
     1 2;           %node 6 - upper middle right node
     0 3;           %node 7 - upper-left node
     1 3];          %node 8 - upper-right node

%This plots the system and pauses the function so the user can verify it.
gplot(A,X,'-o'),title('Three-Story Building'),xlabel('x'),ylabel('y');
axis square
axis([-0.5 1.5 -0.5 X(end,2)+0.5]); %auto-fits the axes to the figure
figure(1)
pause

%N is a matrix that relates the change in position of each node to a change
%in length of an edge, and N' does the opposite.
%columns 1,2 represent the x and y of node 3
%columns 3,4 represent the x and y of node 4, etc.
N = [-1/sqrt(2) 1/sqrt(2) 0 0 0 0 0 0 0 0 0 0;  %edge 2 - upper-left to bottom-right diagonal edge, floor 1
      0 0 1/sqrt(2) 1/sqrt(2) 0 0 0 0 0 0 0 0;  %edge 3 - upper-right to bottom-left diagonal edge, floor 1
      0 1 0 0 0 0 0 0 0 0 0 0;                  %edge 4 - left edge, floor 1
      0 0 0 1 0 0 0 0 0 0 0 0;                  %edge 5 - right edge, floor 1
     -1 0 1 0 0 0 0 0 0 0 0 0;                  %edge 6 - bottom middle edge
      0 0 1/sqrt(2) -1/sqrt(2) -1/sqrt(2) 1/sqrt(2) 0 0 0 0 0 0;
                                                %edge 7 - upper-left to bottom-right diagonal edge, floor 2
     -1/sqrt(2) -1/sqrt(2) 0 0 0 0 1/sqrt(2) 1/sqrt(2) 0 0 0 0;
                                                %edge 8 - upper-right to bottom-left diagonal edge, floor 2
      0 -1 0 0 0 1 0 0 0 0 0 0;                 %edge 9 - left edge, floor 2
      0 0 0 -1 0 0 0 1 0 0 0 0;                 %edge 10 - right edge, floor 2
      0 0 0 0 -1 0 0 1 0 0 0 0;                 %edge 11 - upper middle edge
      0 0 0 0 0 0 1/sqrt(2) -1/sqrt(2) -1/sqrt(2) 1/sqrt(2) 0 0;
                                                %edge 12 - upper-left to bottom-right diagonal edge, floor 3
      0 0 0 0 -1/sqrt(2) -1/sqrt(2) 0 0 0 0 1/sqrt(2) 1/sqrt(2);
                                                %edge 12 - upper-right to bottom-left diagonal edge, floor 3
      0 0 0 0 0 -1 0 0 0 1 0 0;                 %edge 13 - left edge, floor 3
      0 0 0 0 0 0 0 -1 0 0 0 1;                 %edge 14 - right edge, floor 3
      0 0 0 0 0 0 0 0 -1 0 0 1];                %edge 15 - top edge
  
%K is the stiffness matrix
K = N'*N;

%We find the eigenmodes and their associated oscillations through MATLAB.
[V,D] = eigs(-K);               %V = eigenvectors, D = eigenvalues
omega = sqrt(-D);               %omega = oscillation frequencies
V = 0.1*V;                      %makes the eigenmodes manageabottom-lefte
  
%The next series of codes provides the means for animating the structure.            

for i = 1:size(omega);
    for t = 0:.05:(2*pi)/omega(i,i)     %runs for one period
        oscillator = sin(omega(i,i)*t); %sine looks better than cosine, no physical
                                        %meaning to my choice of trig function
        coordinates = [0 0;             %this plots the nodes over time
                       1 0;
                       V(1,i)*oscillator 1+(V(2,i)*oscillator);
                       1+(V(3,i)*oscillator) 1+(V(4,i)*oscillator)
                       V(5,i)*oscillator 2+(V(6,i)*oscillator);
                       1+(V(7,i)*oscillator) 2+(V(8,i)*oscillator)
                       V(9,i)*oscillator 3+(V(10,i)*oscillator);
                       1+(V(11,i)*oscillator) 3+(V(12,i)*oscillator)];
        figure(1)
        gplot(A,coordinates,'-o'),title(sprintf('Three-Story Building \n w = %4.3f, Eigenmode = [%4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f %4.3f]',omega(i,i),V(1,i),V(2,i),V(3,i),V(4,i),V(5,i),V(6,i),V(7,i),V(8,i),V(9,i),V(10,i),V(11,i),V(12,i)));...
            xlabel('x'),ylabel('y'); %label resupper-leftts better!
        axis square
        axis([-0.5 1.5 -0.5 X(end,2)+0.5])
        axis manual
    end
    pause
end
%}


ERMWpart2.m

%Lab Five
%Ethan Robison and Michael Wang
%EA IV
%Due 6/11/13

%% Define Variables
N = [0 0 sqrt(2)/2 sqrt(2)/2; 0 1 0 0 ; 0 0 0 1; -1 0 1 0]; % rows correspond to edges, 
                                                            %columns correspond to x/y coordinates of nodes

k = N'*N;

I = eye(4);
O = 0.01*(k + I);                                           % doing this makes a later step slightly simpler

f1 = [0.01 0 0 0]';                                         % horizontal forcing
f2 = [0 0.01 0 0]';                                         % vertical forcing

w = 0:0.001:3;                                              % omega
t = 0:0.1:10;                                               % time (unnecessary)

U = zeros(4,size(w,2));                                     % initialize
sumsq1 = zeros(1,size(w,2));                                % initialize
sumsq2 = zeros(1,size(w,2));                                % initialize

%% Solve for Amplitude
for ii = 1:size(w,2)                                            % generate an array of U's
    U(1:4,ii) = (-w(ii)^2*I -w(ii)*O*tan(w(ii)*t(1)) + k)\f1;
    sumsq1(ii) = (sum(U(1:4,ii).^2))^0.5;                       % generate the sum of the squares
end

for ii = 1:size(w,2)                                            % generate an array of U's
    U(1:4,ii) = (-w(ii)^2*I -w(ii)*O*tan(w(ii)*t(1)) + k)\f2;
    sumsq2(ii) = (sum(U(1:4,ii).^2))^0.5;                       % generate the sum of the squares
end

%% Display

figure(1);              % Horizontal Forcing
semilogy(w,sumsq1);
xlabel('\itOmega');
ylabel('\bfAmplitude');

figure(2);              % Vertical Forcing
semilogy(w,sumsq2);
xlabel('\itOmega');
ylabel('\bfAmplitude');


Adjuntos:
buildings.m	13.0 KB
ERMWpart2.m	1.7 KB
lab5.docx	119 KB